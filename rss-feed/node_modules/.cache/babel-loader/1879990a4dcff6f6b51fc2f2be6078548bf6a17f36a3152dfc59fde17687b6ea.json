{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\nconst Node = require(\"./Node.js\");\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\nconst interfaceName = \"XMLSerializer\";\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (value, {\n  context = \"The provided value\"\n} = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new TypeError(`${context} is not of type 'XMLSerializer'.`);\n};\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n  const ctor = globalObject[ctorRegistrySymbol][\"XMLSerializer\"];\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor XMLSerializer is not installed on the passed global object\");\n  }\n  return Object.create(ctor.prototype);\n}\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\nexports._internalSetup = (wrapper, globalObject) => {};\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\nexports.new = globalObject => {\n  const wrapper = makeWrapper(globalObject);\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\nconst exposed = new Set([\"Window\"]);\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n  class XMLSerializer {\n    constructor() {\n      return exports.setup(Object.create(new.target.prototype), globalObject, undefined);\n    }\n    serializeToString(root) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"'serializeToString' called on an object that is not a valid instance of XMLSerializer.\");\n      }\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'serializeToString' on 'XMLSerializer': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = Node.convert(curArg, {\n          context: \"Failed to execute 'serializeToString' on 'XMLSerializer': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].serializeToString(...args);\n    }\n  }\n  Object.defineProperties(XMLSerializer.prototype, {\n    serializeToString: {\n      enumerable: true\n    },\n    [Symbol.toStringTag]: {\n      value: \"XMLSerializer\",\n      configurable: true\n    }\n  });\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n  globalObject[ctorRegistrySymbol][interfaceName] = XMLSerializer;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: XMLSerializer\n  });\n};\nconst Impl = require(\"../domparsing/XMLSerializer-impl.js\");","map":{"version":3,"names":["conversions","require","utils","Node","implSymbol","ctorRegistrySymbol","interfaceName","exports","is","value","isObject","hasOwn","Impl","implementation","isImpl","convert","context","implForWrapper","TypeError","makeWrapper","globalObject","undefined","Error","ctor","Object","create","prototype","constructorArgs","privateData","wrapper","setup","createImpl","_internalSetup","defineProperty","configurable","wrapperSymbol","init","new","exposed","Set","install","globalNames","some","globalName","has","XMLSerializer","constructor","target","serializeToString","root","esValue","arguments","length","args","curArg","push","defineProperties","enumerable","Symbol","toStringTag","writable"],"sources":["E:/Tailieu/Nam3/FrondEnd/AppDocBao/news-reading-web/rss-feed/node_modules/jsdom/lib/jsdom/living/generated/XMLSerializer.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst conversions = require(\"webidl-conversions\");\r\nconst utils = require(\"./utils.js\");\r\n\r\nconst Node = require(\"./Node.js\");\r\nconst implSymbol = utils.implSymbol;\r\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\r\n\r\nconst interfaceName = \"XMLSerializer\";\r\n\r\nexports.is = value => {\r\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\r\n};\r\nexports.isImpl = value => {\r\n  return utils.isObject(value) && value instanceof Impl.implementation;\r\n};\r\nexports.convert = (value, { context = \"The provided value\" } = {}) => {\r\n  if (exports.is(value)) {\r\n    return utils.implForWrapper(value);\r\n  }\r\n  throw new TypeError(`${context} is not of type 'XMLSerializer'.`);\r\n};\r\n\r\nfunction makeWrapper(globalObject) {\r\n  if (globalObject[ctorRegistrySymbol] === undefined) {\r\n    throw new Error(\"Internal error: invalid global object\");\r\n  }\r\n\r\n  const ctor = globalObject[ctorRegistrySymbol][\"XMLSerializer\"];\r\n  if (ctor === undefined) {\r\n    throw new Error(\"Internal error: constructor XMLSerializer is not installed on the passed global object\");\r\n  }\r\n\r\n  return Object.create(ctor.prototype);\r\n}\r\n\r\nexports.create = (globalObject, constructorArgs, privateData) => {\r\n  const wrapper = makeWrapper(globalObject);\r\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\r\n};\r\n\r\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\r\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\r\n  return utils.implForWrapper(wrapper);\r\n};\r\n\r\nexports._internalSetup = (wrapper, globalObject) => {};\r\n\r\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\r\n  privateData.wrapper = wrapper;\r\n\r\n  exports._internalSetup(wrapper, globalObject);\r\n  Object.defineProperty(wrapper, implSymbol, {\r\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\r\n    configurable: true\r\n  });\r\n\r\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\r\n  if (Impl.init) {\r\n    Impl.init(wrapper[implSymbol]);\r\n  }\r\n  return wrapper;\r\n};\r\n\r\nexports.new = globalObject => {\r\n  const wrapper = makeWrapper(globalObject);\r\n\r\n  exports._internalSetup(wrapper, globalObject);\r\n  Object.defineProperty(wrapper, implSymbol, {\r\n    value: Object.create(Impl.implementation.prototype),\r\n    configurable: true\r\n  });\r\n\r\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\r\n  if (Impl.init) {\r\n    Impl.init(wrapper[implSymbol]);\r\n  }\r\n  return wrapper[implSymbol];\r\n};\r\n\r\nconst exposed = new Set([\"Window\"]);\r\n\r\nexports.install = (globalObject, globalNames) => {\r\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\r\n    return;\r\n  }\r\n  class XMLSerializer {\r\n    constructor() {\r\n      return exports.setup(Object.create(new.target.prototype), globalObject, undefined);\r\n    }\r\n\r\n    serializeToString(root) {\r\n      const esValue = this !== null && this !== undefined ? this : globalObject;\r\n      if (!exports.is(esValue)) {\r\n        throw new TypeError(\"'serializeToString' called on an object that is not a valid instance of XMLSerializer.\");\r\n      }\r\n\r\n      if (arguments.length < 1) {\r\n        throw new TypeError(\r\n          \"Failed to execute 'serializeToString' on 'XMLSerializer': 1 argument required, but only \" +\r\n            arguments.length +\r\n            \" present.\"\r\n        );\r\n      }\r\n      const args = [];\r\n      {\r\n        let curArg = arguments[0];\r\n        curArg = Node.convert(curArg, {\r\n          context: \"Failed to execute 'serializeToString' on 'XMLSerializer': parameter 1\"\r\n        });\r\n        args.push(curArg);\r\n      }\r\n      return esValue[implSymbol].serializeToString(...args);\r\n    }\r\n  }\r\n  Object.defineProperties(XMLSerializer.prototype, {\r\n    serializeToString: { enumerable: true },\r\n    [Symbol.toStringTag]: { value: \"XMLSerializer\", configurable: true }\r\n  });\r\n  if (globalObject[ctorRegistrySymbol] === undefined) {\r\n    globalObject[ctorRegistrySymbol] = Object.create(null);\r\n  }\r\n  globalObject[ctorRegistrySymbol][interfaceName] = XMLSerializer;\r\n\r\n  Object.defineProperty(globalObject, interfaceName, {\r\n    configurable: true,\r\n    writable: true,\r\n    value: XMLSerializer\r\n  });\r\n};\r\n\r\nconst Impl = require(\"../domparsing/XMLSerializer-impl.js\");\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}