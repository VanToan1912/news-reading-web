{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import axios from 'axios'; // Thư viện để đọc rss\n// import cheerio from 'cheerio'; // Thư viện xử lý rss\n// import \"./detail.css\";\n// import { useParams } from 'react-router-dom';\n// // import bootstrap from 'bootstrap/dist/css/bootstrap.min.css';\n\n// const Detail = ({ articles }) => {\n//     const { link } = useParams(); // Lấy tham số từ URL, trong trường hợp này là link\n//     const [detail, setDetail] = useState(null); // State để lưu chi tiết bài viết\n//     const [feedItems, setFeedItems] = useState([]); // State để lưu danh sách các bài viết liên quan\n\n//     // Hàm giải mã các ký tự đặc biệt trong chuỗi HTML\n//     function decodeHTMLEntities(text) {\n//         const entities = {\n//             '&apos;': \"'\",\n//             '&amp;': '&',\n//             '&lt;': '<',\n//             '&gt;': '>',\n//             '&quot;': '\"',\n//         };\n\n//         // Thay thế các ký tự đặc biệt trong chuỗi với các thực thể tương ứng\n//         Object.keys(entities).forEach(entity => {\n//             const regex = new RegExp(entity, 'g');\n//             text = text.replace(regex, entities[entity]);\n//         });\n\n//         // Sử dụng DOMParser để phân tích chuỗi HTML và trả về nội dung văn bản của nó\n//         const parser = new DOMParser();\n//         const doc = parser.parseFromString(text, 'text/html');\n//         return doc.documentElement.textContent || text;\n//     }\n\n//     // Hàm trích xuất đường dẫn từ URL\n//     const extractLinkPath = (url) => {\n//         const parts = url.split('/');\n//         return parts[parts.length - 1];\n//     };\n\n//     // Sử dụng useEffect để gọi API và cập nhật state khi tham số link thay đổi\n//     useEffect(() => {\n//         async function fetch() {\n//             try {\n//                 // Lấy HTML từ articles.content để xử lý\n//                 const html = articles.content;\n//                 const $ = cheerio.load(html);\n\n//                 // Xử lý các lớp CSS trong HTML để sử dụng className thay vì class\n//                 $('[class]').each((index, element) => {\n//                     const classes = $(element).attr('class')?.split(' ') || [];\n//                     classes.forEach(className => {\n//                         $(element).removeClass(className).addClass(className);\n//                     });\n//                 });\n\n//                 // Trích xuất các thông tin cần thiết từ HTML\n//                 const title = decodeHTMLEntities(articles.title);\n//                 const content = $.html();\n//                 const dateUp = articles.isoDate;\n//                 const demo = decodeHTMLEntities(articles.contentSnippet);\n//                 const navItemsFiltered = []; // Không có thông tin breadcrumb trong props articles\n\n//                 // Cập nhật state detail với các thông tin vừa trích xuất được\n//                 setDetail({ title, demo, content, dateUp, navItems: navItemsFiltered });\n\n//             } catch (error) {\n//                 console.error('Error fetching the HTML:', error);\n//             }\n//         }\n\n//         // Gọi hàm fetch khi component mount\n//         fetch();\n//     }, []); // useEffect sẽ chỉ gọi một lần khi component mount\n\n//     // Render UI\n//     return (\n//        <></>\n//     );\n// };\n\n// export default Detail;","map":{"version":3,"names":[],"sources":["E:/Tailieu/Nam3/FrondEnd/AppDocBao/news-reading-web/rss-feed/src/components/ArticleDetailPage/ArticleDetailPage.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios'; // Thư viện để đọc rss\r\n// import cheerio from 'cheerio'; // Thư viện xử lý rss\r\n// import \"./detail.css\";\r\n// import { useParams } from 'react-router-dom';\r\n// // import bootstrap from 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// const Detail = ({ articles }) => {\r\n//     const { link } = useParams(); // Lấy tham số từ URL, trong trường hợp này là link\r\n//     const [detail, setDetail] = useState(null); // State để lưu chi tiết bài viết\r\n//     const [feedItems, setFeedItems] = useState([]); // State để lưu danh sách các bài viết liên quan\r\n\r\n//     // Hàm giải mã các ký tự đặc biệt trong chuỗi HTML\r\n//     function decodeHTMLEntities(text) {\r\n//         const entities = {\r\n//             '&apos;': \"'\",\r\n//             '&amp;': '&',\r\n//             '&lt;': '<',\r\n//             '&gt;': '>',\r\n//             '&quot;': '\"',\r\n//         };\r\n\r\n//         // Thay thế các ký tự đặc biệt trong chuỗi với các thực thể tương ứng\r\n//         Object.keys(entities).forEach(entity => {\r\n//             const regex = new RegExp(entity, 'g');\r\n//             text = text.replace(regex, entities[entity]);\r\n//         });\r\n\r\n//         // Sử dụng DOMParser để phân tích chuỗi HTML và trả về nội dung văn bản của nó\r\n//         const parser = new DOMParser();\r\n//         const doc = parser.parseFromString(text, 'text/html');\r\n//         return doc.documentElement.textContent || text;\r\n//     }\r\n\r\n//     // Hàm trích xuất đường dẫn từ URL\r\n//     const extractLinkPath = (url) => {\r\n//         const parts = url.split('/');\r\n//         return parts[parts.length - 1];\r\n//     };\r\n\r\n//     // Sử dụng useEffect để gọi API và cập nhật state khi tham số link thay đổi\r\n//     useEffect(() => {\r\n//         async function fetch() {\r\n//             try {\r\n//                 // Lấy HTML từ articles.content để xử lý\r\n//                 const html = articles.content;\r\n//                 const $ = cheerio.load(html);\r\n\r\n//                 // Xử lý các lớp CSS trong HTML để sử dụng className thay vì class\r\n//                 $('[class]').each((index, element) => {\r\n//                     const classes = $(element).attr('class')?.split(' ') || [];\r\n//                     classes.forEach(className => {\r\n//                         $(element).removeClass(className).addClass(className);\r\n//                     });\r\n//                 });\r\n\r\n//                 // Trích xuất các thông tin cần thiết từ HTML\r\n//                 const title = decodeHTMLEntities(articles.title);\r\n//                 const content = $.html();\r\n//                 const dateUp = articles.isoDate;\r\n//                 const demo = decodeHTMLEntities(articles.contentSnippet);\r\n//                 const navItemsFiltered = []; // Không có thông tin breadcrumb trong props articles\r\n                \r\n//                 // Cập nhật state detail với các thông tin vừa trích xuất được\r\n//                 setDetail({ title, demo, content, dateUp, navItems: navItemsFiltered });\r\n\r\n//             } catch (error) {\r\n//                 console.error('Error fetching the HTML:', error);\r\n//             }\r\n//         }\r\n\r\n//         // Gọi hàm fetch khi component mount\r\n//         fetch();\r\n//     }, []); // useEffect sẽ chỉ gọi một lần khi component mount\r\n\r\n//     // Render UI\r\n//     return (\r\n//        <></>\r\n//     );\r\n// };\r\n\r\n// export default Detail;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}