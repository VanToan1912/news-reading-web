{"ast":null,"code":"\"use strict\";\n\nconst enumerationValues = new Set([\"text/html\", \"text/xml\", \"application/xml\", \"application/xhtml+xml\", \"image/svg+xml\"]);\nexports.enumerationValues = enumerationValues;\nexports.convert = function convert(value, {\n  context = \"The provided value\"\n} = {}) {\n  const string = `${value}`;\n  if (!enumerationValues.has(string)) {\n    throw new TypeError(`${context} '${string}' is not a valid enumeration value for SupportedType`);\n  }\n  return string;\n};","map":{"version":3,"names":["enumerationValues","Set","exports","convert","value","context","string","has","TypeError"],"sources":["E:/Tailieu/Nam3/FrondEnd/AppDocBao/news-reading-web/rss-feed/node_modules/jsdom/lib/jsdom/living/generated/SupportedType.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst enumerationValues = new Set([\r\n  \"text/html\",\r\n  \"text/xml\",\r\n  \"application/xml\",\r\n  \"application/xhtml+xml\",\r\n  \"image/svg+xml\"\r\n]);\r\nexports.enumerationValues = enumerationValues;\r\n\r\nexports.convert = function convert(value, { context = \"The provided value\" } = {}) {\r\n  const string = `${value}`;\r\n  if (!enumerationValues.has(string)) {\r\n    throw new TypeError(`${context} '${string}' is not a valid enumeration value for SupportedType`);\r\n  }\r\n  return string;\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,iBAAiB,GAAG,IAAIC,GAAG,CAAC,CAChC,WAAW,EACX,UAAU,EACV,iBAAiB,EACjB,uBAAuB,EACvB,eAAe,CAChB,CAAC;AACFC,OAAO,CAACF,iBAAiB,GAAGA,iBAAiB;AAE7CE,OAAO,CAACC,OAAO,GAAG,SAASA,OAAOA,CAACC,KAAK,EAAE;EAAEC,OAAO,GAAG;AAAqB,CAAC,GAAG,CAAC,CAAC,EAAE;EACjF,MAAMC,MAAM,GAAG,GAAGF,KAAK,EAAE;EACzB,IAAI,CAACJ,iBAAiB,CAACO,GAAG,CAACD,MAAM,CAAC,EAAE;IAClC,MAAM,IAAIE,SAAS,CAAC,GAAGH,OAAO,KAAKC,MAAM,sDAAsD,CAAC;EAClG;EACA,OAAOA,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}